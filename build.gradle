plugins {
    id 'java-library'
    id 'maven-publish'
    id 'signing'
    id 'jacoco'
    id "com.adarshr.test-logger" version "3.2.0"
    id 'org.springframework.boot' version '3.1.0'
    id 'io.spring.dependency-management' version '1.1.0'
}

group = 'io.github.drednote'
version = findProperty("tag_version") ?: 'master-SNAPSHOT'
sourceCompatibility = '17'

bootJar.enabled = false

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    api 'org.telegram:telegrambots:6.5.0'
    api 'com.esotericsoftware:kryo:4.0.3'
    api 'org.springframework.boot:spring-boot-starter'
    api 'org.springframework:spring-web'

    // data
    compileOnly 'org.springframework.boot:spring-boot-starter-data-jpa'
    compileOnly 'org.springframework.boot:spring-boot-starter-data-mongodb'

    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'

    annotationProcessor "org.springframework.boot:spring-boot-configuration-processor"

    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    testImplementation 'org.projectlombok:lombok'
    testAnnotationProcessor 'org.projectlombok:lombok'
}

tasks.register('sourceJar', Jar) {
    from sourceSets.main.allJava
}

tasks.named('compileJava') {
    inputs.files(tasks.named('processResources'))
}

signing {
    if (!version.toString().endsWith("SNAPSHOT")) {
        useGpgCmd()
        sign publishing.publications
    }
}

publishing {
    repositories {
        maven {
            if (version.toString().endsWith("SNAPSHOT")) {
                allowInsecureProtocol true
                url = NEXUS_UPLOAD_REPO
            } else {
                url = MAVEN_RELEASE_REPO
            }
            credentials {
                username = System.getenv("OSSRH_USERNAME") ?: System.getProperty("OSSRH_USERNAME")
                password = System.getenv("OSSRH_PASSWORD") ?: System.getProperty("OSSRH_PASSWORD")
            }
        }
    }
    publications {
        register('mavenJava', MavenPublication) {
            groupId group
            artifactId archivesBaseName
            version version

            from components.java
            artifact sourceJar {
                classifier "sources"
            }
            pom {
                packaging = jar
                name = "Spring Boot Starter Telegram"
                url = "https://github.com/drednote/spring-boot-starter-telegram"
                description = "A library designed to simplify the setup of Telegram bots using " +
                        "`Spring Boot` and `org.telegram:telegrambots` as the core dependency"

                licenses {
                    license {
                        name = "MIT License"
                        url = "https://github.com/Drednote/spring-boot-starter-telegram/blob/master/LICENSE"
                    }
                }

                scm {
                    connection = "scm:https://github.com/drednote/spring-boot-starter-telegram.git"
                    developerConnection = "scm:git@github.com:drednote/spring-boot-starter-telegram.git"
                    url = "https://github.com/drednote/spring-boot-starter-telegram"
                }

                developers {
                    developer {
                        name = "Galushko Ivan"
                        email = "galushko.ivan8@gmail.com"
                    }
                }
            }
        }
    }
}

test {
    useJUnitPlatform()
    finalizedBy jacocoTestReport

    jacocoTestReport {
        dependsOn test
        reports {
            xml.enabled true
            csv.enabled false
            html.outputLocation = layout.buildDirectory.dir('reports/jacoco/test/html')
        }
    }
}
